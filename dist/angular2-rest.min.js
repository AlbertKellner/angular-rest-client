"use strict";function Client(e){return function(t){return e.serviceId&&(t.prototype.getServiceId=function(){return e.serviceId}),e.baseUrl&&(t.prototype.getBaseUrl=function(){return e.baseUrl}),e.headers&&(t.prototype.getDefaultHeaders=function(){return e.headers}),t}}function paramBuilder(e){return function(t){return function(r,n,o){var a=n+"_"+e+"_parameters",u={key:t,parameterIndex:o};Array.isArray(r[a])?r[a].push(u):r[a]=[u]}}}function Headers(e){return function(t,r,n){return n.headers=e,n}}function Map(e){return function(t,r,n){return n.mappers||(n.mappers=[]),n.mappers.push(e),n}}function OnEmit(e){return function(t,r,n){return n.emitters||(n.emitters=[]),n.emitters.push(e),n}}function Produces(e){return function(t,r,n){return void 0!=e&&e===MediaType.JSON&&(n.mime=function(e){return e.json()}),n}}function methodBuilder(e){return function(t){return function(r,n,o){var a=r[n+"_Path_parameters"],u=r[n+"_Query_parameters"],p=r[n+"_Body_parameters"],s=r[n+"_Header_parameters"];return o.value=function(){for(var r=[],n=0;n<arguments.length;n++)r[n-0]=arguments[n];var i=null;p&&(i=JSON.stringify(r[p[0].parameterIndex]));var d=t;if(a)for(var h in a)a.hasOwnProperty(h)&&(d=d.replace("{"+a[h].key+"}",r[a[h].parameterIndex]));if(null!=this.getBaseUrl()){var c=this.getBaseUrl();c.indexOf("/")==c.length-1&&0==d.indexOf("/")&&(c=c.substring(0,1)),d=c+d}var f=new http_1.URLSearchParams;u&&u.filter(function(e){return r[e.parameterIndex]}).forEach(function(e){var t=e.key,n=r[e.parameterIndex];n instanceof Object&&(n=JSON.stringify(n)),f.set(encodeURIComponent(t),encodeURIComponent(n))});var m=new http_1.Headers(this.getDefaultHeaders());for(var h in o.headers)o.headers.hasOwnProperty(h)&&m.append(h,o.headers[h]);if(s)for(var h in s)s.hasOwnProperty(h)&&m.append(s[h].key,r[s[h].parameterIndex]);var l=new http_1.RequestOptions({method:e,url:d,headers:m,body:i,search:f}),y=new http_1.Request(l);this.requestInterceptor(y);var x=this.httpClient.request(y);return o.mime&&(x=x.map(o.mime)),o.mappers&&o.mappers.forEach(function(e){x=x.map(e)}),o.emitters&&o.emitters.forEach(function(e){x=e(x)}),x=this.responseInterceptor(x)},o}}}var http_1=require("@angular/http");require("rxjs/add/operator/map");var RestClient=function(){function e(e){this.httpClient=e}return e.prototype.getServiceId=function(){return null},e.prototype.getBaseUrl=function(){return null},e.prototype.getDefaultHeaders=function(){return null},e.prototype.requestInterceptor=function(e){},e.prototype.responseInterceptor=function(e){return e},e}();exports.RestClient=RestClient,exports.Client=Client,exports.Path=paramBuilder("Path"),exports.Query=paramBuilder("Query"),exports.Body=paramBuilder("Body")("Body"),exports.Header=paramBuilder("Header"),exports.Headers=Headers,exports.Map=Map,exports.OnEmit=OnEmit,exports.Produces=Produces,function(e){e[e.JSON=0]="JSON"}(exports.MediaType||(exports.MediaType={}));var MediaType=exports.MediaType;exports.Get=methodBuilder(http_1.RequestMethod.Get),exports.Post=methodBuilder(http_1.RequestMethod.Post),exports.Put=methodBuilder(http_1.RequestMethod.Put),exports.Patch=methodBuilder(http_1.RequestMethod.Patch),exports.Delete=methodBuilder(http_1.RequestMethod.Delete),exports.Head=methodBuilder(http_1.RequestMethod.Head);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFuZ3VsYXIyLXJlc3QuanMiLCJhbmd1bGFyMi1yZXN0LnRzIl0sIm5hbWVzIjpbIkNsaWVudCIsImFyZ3MiLCJUYXJnZXQiLCJzZXJ2aWNlSWQiLCJwcm90b3R5cGUiLCJnZXRTZXJ2aWNlSWQiLCJiYXNlVXJsIiwiZ2V0QmFzZVVybCIsImhlYWRlcnMiLCJnZXREZWZhdWx0SGVhZGVycyIsInBhcmFtQnVpbGRlciIsInBhcmFtTmFtZSIsImtleSIsInRhcmdldCIsInByb3BlcnR5S2V5IiwicGFyYW1ldGVySW5kZXgiLCJtZXRhZGF0YUtleSIsInBhcmFtT2JqIiwiQXJyYXkiLCJpc0FycmF5IiwicHVzaCIsIkhlYWRlcnMiLCJoZWFkZXJzRGVmIiwiZGVzY3JpcHRvciIsIk1hcCIsIm1hcHBlciIsIm1hcHBlcnMiLCJPbkVtaXQiLCJlbWl0dGVyIiwiZW1pdHRlcnMiLCJQcm9kdWNlcyIsIm1pbWUiLCJ1bmRlZmluZWQiLCJNZWRpYVR5cGUiLCJKU09OIiwicmVzIiwianNvbiIsIm1ldGhvZEJ1aWxkZXIiLCJtZXRob2QiLCJ1cmwiLCJwUGF0aCIsInBRdWVyeSIsInBCb2R5IiwicEhlYWRlciIsInZhbHVlIiwiX2kiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJib2R5Iiwic3RyaW5naWZ5IiwicmVzVXJsIiwiayIsImhhc093blByb3BlcnR5IiwicmVwbGFjZSIsInRoaXMiLCJpbmRleE9mIiwic3Vic3RyaW5nIiwic2VhcmNoIiwiaHR0cF8xIiwiVVJMU2VhcmNoUGFyYW1zIiwiZmlsdGVyIiwicCIsImZvckVhY2giLCJPYmplY3QiLCJzZXQiLCJlbmNvZGVVUklDb21wb25lbnQiLCJhcHBlbmQiLCJvcHRpb25zIiwiUmVxdWVzdE9wdGlvbnMiLCJyZXEiLCJSZXF1ZXN0IiwicmVxdWVzdEludGVyY2VwdG9yIiwib2JzZXJ2YWJsZSIsImh0dHBDbGllbnQiLCJyZXF1ZXN0IiwibWFwIiwiaGFuZGxlciIsInJlc3BvbnNlSW50ZXJjZXB0b3IiLCJyZXF1aXJlIiwiUmVzdENsaWVudCIsImV4cG9ydHMiLCJQYXRoIiwiUXVlcnkiLCJCb2R5IiwiSGVhZGVyIiwiR2V0IiwiUmVxdWVzdE1ldGhvZCIsIlBvc3QiLCJQdXQiLCJQYXRjaCIsIkRlbGV0ZSIsIkhlYWQiXSwibWFwcGluZ3MiOiJBQUFBLFlDOEZBLFNBQUFBLFFBQXVCQyxHQUNyQixNQUFPLFVBQXNDQyxHQWdCM0MsTUFmR0QsR0FBS0UsWUFDTkQsRUFBT0UsVUFBVUMsYUFBZSxXQUM5QixNQUFPSixHQUFLRSxZQUdiRixFQUFLSyxVQUNOSixFQUFPRSxVQUFVRyxXQUFhLFdBQzVCLE1BQU9OLEdBQUtLLFVBR2JMLEVBQUtPLFVBQ05OLEVBQU9FLFVBQVVLLGtCQUFvQixXQUNuQyxNQUFPUixHQUFLTyxVQUdUTixHQUlYLFFBQUFRLGNBQXNCQyxHQUNwQixNQUFPLFVBQVNDLEdBQ2QsTUFBTyxVQUFTQyxFQUFvQkMsRUFBOEJDLEdBQ2hFLEdBQUlDLEdBQWlCRixFQUFXLElBQUlILEVBQVMsY0FDekNNLEdBQ0ZMLElBQUtBLEVBQ0xHLGVBQWdCQSxFQUVkRyxPQUFNQyxRQUFRTixFQUFPRyxJQUN2QkgsRUFBT0csR0FBYUksS0FBS0gsR0FFekJKLEVBQU9HLElBQWdCQyxLQWdDL0IsUUFBQUksU0FBd0JDLEdBQ3RCLE1BQU8sVUFBU1QsRUFBb0JDLEVBQXFCUyxHQUV2RCxNQURBQSxHQUFXZixRQUFVYyxFQUNkQyxHQVFYLFFBQUFDLEtBQW9CQyxHQUNsQixNQUFPLFVBQVNaLEVBQW9CQyxFQUFxQlMsR0FLdkQsTUFKSUEsR0FBV0csVUFDYkgsRUFBV0csWUFFYkgsRUFBV0csUUFBUU4sS0FBS0ssR0FDakJGLEdBUVgsUUFBQUksUUFBdUJDLEdBQ3JCLE1BQU8sVUFBU2YsRUFBb0JDLEVBQXFCUyxHQUt2RCxNQUpJQSxHQUFXTSxXQUNiTixFQUFXTSxhQUViTixFQUFXTSxTQUFTVCxLQUFLUSxHQUNsQkwsR0FRWCxRQUFBTyxVQUF5QkMsR0FDdkIsTUFBTyxVQUFTbEIsRUFBb0JDLEVBQXFCUyxH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QUNFLE1BQU8sT0FHQzBFLEVBQUEzRSxVQUFBRyxXQUFWLFdBQ0UsTUFBTyxPQUdDd0UsRUFBQTNFLFVBQUFLLGtCQUFWLFdBQ0UsTUFBTyxPQVNDc0UsRUFBQTNFLFVBQUFtRSxtQkFBVixTQUE2QkYsS0FXbkJVLEVBQUEzRSxVQUFBeUUsb0JBQVYsU0FBOEIxQyxHQUM1QixNQUFPQSxJQUdYNEMsSUF0Q2FDLFNBQUFELFdBQVVBLFdBOENQQyxRQUFBaEYsT0FBTUEsT0EwQ1hnRixRQUFBQyxLQUFPdkUsYUFBYSxRQUtwQnNFLFFBQUFFLE1BQVF4RSxhQUFhLFNBS3JCc0UsUUFBQUcsS0FBT3pFLGFBQWEsUUFBUSxRQUs1QnNFLFFBQUFJLE9BQVMxRSxhQUFhLFVBT2pCc0UsUUFBQTNELFFBQU9BLFFBV1AyRCxRQUFBeEQsSUFBR0EsSUFjSHdELFFBQUFyRCxPQUFNQSxPQWNOcUQsUUFBQWxELFNBQVFBLFNBZXhCLFNBQVlHLEdBQ1ZBLEVBQUFBLEVBQUEsS0FBQSxHQUFBLFFBRFUrQyxRQUFBL0MsWUFBQStDLFFBQUEvQyxjQUFaLElBQVlBLFdBQUErQyxRQUFBL0MsU0F1SEQrQyxTQUFBSyxJQUFNaEQsY0FBY3FCLE9BQUE0QixjQUFlRCxLQUtuQ0wsUUFBQU8sS0FBT2xELGNBQWNxQixPQUFBNEIsY0FBZUMsTUFLcENQLFFBQUFRLElBQU1uRCxjQUFjcUIsT0FBQTRCLGNBQWVFLEtBTW5DUixRQUFBUyxNQUFRcEQsY0FBY3FCLE9BQUE0QixjQUFlRyxPQUtyQ1QsUUFBQVUsT0FBU3JELGNBQWNxQixPQUFBNEIsY0FBZUksUUFLdENWLFFBQUFXLEtBQU90RCxjQUFjcUIsT0FBQTRCLGNBQWVLIiwiZmlsZSI6ImFuZ3VsYXIyLXJlc3QubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgaHR0cF8xID0gcmVxdWlyZShcIkBhbmd1bGFyL2h0dHBcIik7XG5yZXF1aXJlKFwicnhqcy9hZGQvb3BlcmF0b3IvbWFwXCIpO1xudmFyIFJlc3RDbGllbnQgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFJlc3RDbGllbnQoaHR0cENsaWVudCkge1xuICAgICAgICB0aGlzLmh0dHBDbGllbnQgPSBodHRwQ2xpZW50O1xuICAgIH1cbiAgICBSZXN0Q2xpZW50LnByb3RvdHlwZS5nZXRTZXJ2aWNlSWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH07XG4gICAgUmVzdENsaWVudC5wcm90b3R5cGUuZ2V0QmFzZVVybCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbiAgICA7XG4gICAgUmVzdENsaWVudC5wcm90b3R5cGUuZ2V0RGVmYXVsdEhlYWRlcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH07XG4gICAgO1xuICAgIFJlc3RDbGllbnQucHJvdG90eXBlLnJlcXVlc3RJbnRlcmNlcHRvciA9IGZ1bmN0aW9uIChyZXEpIHtcbiAgICB9O1xuICAgIFJlc3RDbGllbnQucHJvdG90eXBlLnJlc3BvbnNlSW50ZXJjZXB0b3IgPSBmdW5jdGlvbiAocmVzKSB7XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfTtcbiAgICByZXR1cm4gUmVzdENsaWVudDtcbn0oKSk7XG5leHBvcnRzLlJlc3RDbGllbnQgPSBSZXN0Q2xpZW50O1xuZnVuY3Rpb24gQ2xpZW50KGFyZ3MpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKFRhcmdldCkge1xuICAgICAgICBpZiAoYXJncy5zZXJ2aWNlSWQpIHtcbiAgICAgICAgICAgIFRhcmdldC5wcm90b3R5cGUuZ2V0U2VydmljZUlkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhcmdzLnNlcnZpY2VJZDtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFyZ3MuYmFzZVVybCkge1xuICAgICAgICAgICAgVGFyZ2V0LnByb3RvdHlwZS5nZXRCYXNlVXJsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhcmdzLmJhc2VVcmw7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChhcmdzLmhlYWRlcnMpIHtcbiAgICAgICAgICAgIFRhcmdldC5wcm90b3R5cGUuZ2V0RGVmYXVsdEhlYWRlcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFyZ3MuaGVhZGVycztcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFRhcmdldDtcbiAgICB9O1xufVxuZXhwb3J0cy5DbGllbnQgPSBDbGllbnQ7XG5mdW5jdGlvbiBwYXJhbUJ1aWxkZXIocGFyYW1OYW1lKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIHByb3BlcnR5S2V5LCBwYXJhbWV0ZXJJbmRleCkge1xuICAgICAgICAgICAgdmFyIG1ldGFkYXRhS2V5ID0gcHJvcGVydHlLZXkgKyBcIl9cIiArIHBhcmFtTmFtZSArIFwiX3BhcmFtZXRlcnNcIjtcbiAgICAgICAgICAgIHZhciBwYXJhbU9iaiA9IHtcbiAgICAgICAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICAgICAgICBwYXJhbWV0ZXJJbmRleDogcGFyYW1ldGVySW5kZXhcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh0YXJnZXRbbWV0YWRhdGFLZXldKSkge1xuICAgICAgICAgICAgICAgIHRhcmdldFttZXRhZGF0YUtleV0ucHVzaChwYXJhbU9iaik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRbbWV0YWRhdGFLZXldID0gW3BhcmFtT2JqXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9O1xufVxuZXhwb3J0cy5QYXRoID0gcGFyYW1CdWlsZGVyKFwiUGF0aFwiKTtcbmV4cG9ydHMuUXVlcnkgPSBwYXJhbUJ1aWxkZXIoXCJRdWVyeVwiKTtcbmV4cG9ydHMuQm9keSA9IHBhcmFtQnVpbGRlcihcIkJvZHlcIikoXCJCb2R5XCIpO1xuZXhwb3J0cy5IZWFkZXIgPSBwYXJhbUJ1aWxkZXIoXCJIZWFkZXJcIik7XG5mdW5jdGlvbiBIZWFkZXJzKGhlYWRlcnNEZWYpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwgcHJvcGVydHlLZXksIGRlc2NyaXB0b3IpIHtcbiAgICAgICAgZGVzY3JpcHRvci5oZWFkZXJzID0gaGVhZGVyc0RlZjtcbiAgICAgICAgcmV0dXJuIGRlc2NyaXB0b3I7XG4gICAgfTtcbn1cbmV4cG9ydHMuSGVhZGVycyA9IEhlYWRlcnM7XG5mdW5jdGlvbiBNYXAobWFwcGVyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIHByb3BlcnR5S2V5LCBkZXNjcmlwdG9yKSB7XG4gICAgICAgIGlmICghZGVzY3JpcHRvci5tYXBwZXJzKSB7XG4gICAgICAgICAgICBkZXNjcmlwdG9yLm1hcHBlcnMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBkZXNjcmlwdG9yLm1hcHBlcnMucHVzaChtYXBwZXIpO1xuICAgICAgICByZXR1cm4gZGVzY3JpcHRvcjtcbiAgICB9O1xufVxuZXhwb3J0cy5NYXAgPSBNYXA7XG5mdW5jdGlvbiBPbkVtaXQoZW1pdHRlcikge1xuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBwcm9wZXJ0eUtleSwgZGVzY3JpcHRvcikge1xuICAgICAgICBpZiAoIWRlc2NyaXB0b3IuZW1pdHRlcnMpIHtcbiAgICAgICAgICAgIGRlc2NyaXB0b3IuZW1pdHRlcnMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBkZXNjcmlwdG9yLmVtaXR0ZXJzLnB1c2goZW1pdHRlcik7XG4gICAgICAgIHJldHVybiBkZXNjcmlwdG9yO1xuICAgIH07XG59XG5leHBvcnRzLk9uRW1pdCA9IE9uRW1pdDtcbmZ1bmN0aW9uIFByb2R1Y2VzKG1pbWUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwgcHJvcGVydHlLZXksIGRlc2NyaXB0b3IpIHtcbiAgICAgICAgaWYgKG1pbWUgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAobWltZSA9PT0gTWVkaWFUeXBlLkpTT04pIHtcbiAgICAgICAgICAgICAgICBkZXNjcmlwdG9yLm1pbWUgPSBmdW5jdGlvbiAocmVzKSB7IHJldHVybiByZXMuanNvbigpOyB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkZXNjcmlwdG9yO1xuICAgIH07XG59XG5leHBvcnRzLlByb2R1Y2VzID0gUHJvZHVjZXM7XG4oZnVuY3Rpb24gKE1lZGlhVHlwZSkge1xuICAgIE1lZGlhVHlwZVtNZWRpYVR5cGVbXCJKU09OXCJdID0gMF0gPSBcIkpTT05cIjtcbn0pKGV4cG9ydHMuTWVkaWFUeXBlIHx8IChleHBvcnRzLk1lZGlhVHlwZSA9IHt9KSk7XG52YXIgTWVkaWFUeXBlID0gZXhwb3J0cy5NZWRpYVR5cGU7XG5mdW5jdGlvbiBtZXRob2RCdWlsZGVyKG1ldGhvZCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAodXJsKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBwcm9wZXJ0eUtleSwgZGVzY3JpcHRvcikge1xuICAgICAgICAgICAgdmFyIHBQYXRoID0gdGFyZ2V0Wyhwcm9wZXJ0eUtleSArIFwiX1BhdGhfcGFyYW1ldGVyc1wiKV07XG4gICAgICAgICAgICB2YXIgcFF1ZXJ5ID0gdGFyZ2V0Wyhwcm9wZXJ0eUtleSArIFwiX1F1ZXJ5X3BhcmFtZXRlcnNcIildO1xuICAgICAgICAgICAgdmFyIHBCb2R5ID0gdGFyZ2V0Wyhwcm9wZXJ0eUtleSArIFwiX0JvZHlfcGFyYW1ldGVyc1wiKV07XG4gICAgICAgICAgICB2YXIgcEhlYWRlciA9IHRhcmdldFsocHJvcGVydHlLZXkgKyBcIl9IZWFkZXJfcGFyYW1ldGVyc1wiKV07XG4gICAgICAgICAgICBkZXNjcmlwdG9yLnZhbHVlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICAgICAgYXJnc1tfaSAtIDBdID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGJvZHkgPSBudWxsO1xuICAgICAgICAgICAgICAgIGlmIChwQm9keSkge1xuICAgICAgICAgICAgICAgICAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkoYXJnc1twQm9keVswXS5wYXJhbWV0ZXJJbmRleF0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgcmVzVXJsID0gdXJsO1xuICAgICAgICAgICAgICAgIGlmIChwUGF0aCkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBrIGluIHBQYXRoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocFBhdGguaGFzT3duUHJvcGVydHkoaykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNVcmwgPSByZXNVcmwucmVwbGFjZShcIntcIiArIHBQYXRoW2tdLmtleSArIFwifVwiLCBhcmdzW3BQYXRoW2tdLnBhcmFtZXRlckluZGV4XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZ2V0QmFzZVVybCgpICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJhc2VVcmwgPSB0aGlzLmdldEJhc2VVcmwoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJhc2VVcmwuaW5kZXhPZihcIi9cIikgPT0gYmFzZVVybC5sZW5ndGggLSAxICYmIHJlc1VybC5pbmRleE9mKFwiL1wiKSA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBiYXNlVXJsID0gYmFzZVVybC5zdWJzdHJpbmcoMCwgMSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmVzVXJsID0gYmFzZVVybCArIHJlc1VybDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIHNlYXJjaCA9IG5ldyBodHRwXzEuVVJMU2VhcmNoUGFyYW1zKCk7XG4gICAgICAgICAgICAgICAgaWYgKHBRdWVyeSkge1xuICAgICAgICAgICAgICAgICAgICBwUXVlcnlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKHApIHsgcmV0dXJuIGFyZ3NbcC5wYXJhbWV0ZXJJbmRleF07IH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAuZm9yRWFjaChmdW5jdGlvbiAocCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGtleSA9IHAua2V5O1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gYXJnc1twLnBhcmFtZXRlckluZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIE9iamVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgc2VhcmNoLnNldChlbmNvZGVVUklDb21wb25lbnQoa2V5KSwgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgaGVhZGVycyA9IG5ldyBodHRwXzEuSGVhZGVycyh0aGlzLmdldERlZmF1bHRIZWFkZXJzKCkpO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGsgaW4gZGVzY3JpcHRvci5oZWFkZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkZXNjcmlwdG9yLmhlYWRlcnMuaGFzT3duUHJvcGVydHkoaykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnMuYXBwZW5kKGssIGRlc2NyaXB0b3IuaGVhZGVyc1trXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHBIZWFkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgayBpbiBwSGVhZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocEhlYWRlci5oYXNPd25Qcm9wZXJ0eShrKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnMuYXBwZW5kKHBIZWFkZXJba10ua2V5LCBhcmdzW3BIZWFkZXJba10ucGFyYW1ldGVySW5kZXhdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgb3B0aW9ucyA9IG5ldyBodHRwXzEuUmVxdWVzdE9wdGlvbnMoe1xuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiByZXNVcmwsXG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXG4gICAgICAgICAgICAgICAgICAgIGJvZHk6IGJvZHksXG4gICAgICAgICAgICAgICAgICAgIHNlYXJjaDogc2VhcmNoXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdmFyIHJlcSA9IG5ldyBodHRwXzEuUmVxdWVzdChvcHRpb25zKTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlcXVlc3RJbnRlcmNlcHRvcihyZXEpO1xuICAgICAgICAgICAgICAgIHZhciBvYnNlcnZhYmxlID0gdGhpcy5odHRwQ2xpZW50LnJlcXVlc3QocmVxKTtcbiAgICAgICAgICAgICAgICBpZiAoZGVzY3JpcHRvci5taW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmFibGUgPSBvYnNlcnZhYmxlLm1hcChkZXNjcmlwdG9yLm1pbWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZGVzY3JpcHRvci5tYXBwZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0b3IubWFwcGVycy5mb3JFYWNoKGZ1bmN0aW9uIChtYXBwZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmFibGUgPSBvYnNlcnZhYmxlLm1hcChtYXBwZXIpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGRlc2NyaXB0b3IuZW1pdHRlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRvci5lbWl0dGVycy5mb3JFYWNoKGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZhYmxlID0gaGFuZGxlcihvYnNlcnZhYmxlKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG9ic2VydmFibGUgPSB0aGlzLnJlc3BvbnNlSW50ZXJjZXB0b3Iob2JzZXJ2YWJsZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9ic2VydmFibGU7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIGRlc2NyaXB0b3I7XG4gICAgICAgIH07XG4gICAgfTtcbn1cbmV4cG9ydHMuR2V0ID0gbWV0aG9kQnVpbGRlcihodHRwXzEuUmVxdWVzdE1ldGhvZC5HZXQpO1xuZXhwb3J0cy5Qb3N0ID0gbWV0aG9kQnVpbGRlcihodHRwXzEuUmVxdWVzdE1ldGhvZC5Qb3N0KTtcbmV4cG9ydHMuUHV0ID0gbWV0aG9kQnVpbGRlcihodHRwXzEuUmVxdWVzdE1ldGhvZC5QdXQpO1xuZXhwb3J0cy5QYXRjaCA9IG1ldGhvZEJ1aWxkZXIoaHR0cF8xLlJlcXVlc3RNZXRob2QuUGF0Y2gpO1xuZXhwb3J0cy5EZWxldGUgPSBtZXRob2RCdWlsZGVyKGh0dHBfMS5SZXF1ZXN0TWV0aG9kLkRlbGV0ZSk7XG5leHBvcnRzLkhlYWQgPSBtZXRob2RCdWlsZGVyKGh0dHBfMS5SZXF1ZXN0TWV0aG9kLkhlYWQpO1xuIiwiLypcblxuIGFuZ3VsYXIyLXJlc3RcbiAoYykgRG9tb25rb3MgUGFsXG4gTGljZW5zZTogTUlUXG5cbiBUYWJsZSBvZiBDb250ZW50czpcblxuIC0gY2xhc3MgUkVTVENsaWVudFxuXG4gLSBDbGFzcyBEZWNvcmF0b3JzOlxuIEBCYXNlVXJsKFN0cmluZylcbiBARGVmYXVsdEhlYWRlcnMoT2JqZWN0KVxuXG4gLSBNZXRob2QgRGVjb3JhdG9yczpcbiBAR0VUKHVybDogU3RyaW5nKVxuIEBQT1NUKHVybDogU3RyaW5nKVxuIEBQVVQodXJsOiBTdHJpbmcpXG4gQERFTEVURSh1cmw6IFN0cmluZylcbiBASGVhZGVycyhvYmplY3QpXG4gQFByb2R1Y2VzKE1lZGlhVHlwZSlcblxuIC0gUGFyYW1ldGVyIERlY29yYXRvcnM6XG4gQFBhdGgoc3RyaW5nKVxuIEBRdWVyeShzdHJpbmcpXG4gQEhlYWRlcihzdHJpbmcpXG4gQEJvZHlcbiAqL1xuXG5pbXBvcnQge1xuICBIZWFkZXJzIGFzIEFuZ3VsYXJIZWFkZXJzLFxuICBSZXF1ZXN0LFxuICBSZXF1ZXN0T3B0aW9ucyxcbiAgUmVxdWVzdE1ldGhvZCBhcyBSZXF1ZXN0TWV0aG9kcyxcbiAgUmVzcG9uc2UsXG4gIFVSTFNlYXJjaFBhcmFtcyxcbiAgUmVxdWVzdE9wdGlvbnNBcmdzXG59IGZyb20gXCJAYW5ndWxhci9odHRwXCI7XG5pbXBvcnQge09ic2VydmFibGV9IGZyb20gXCJyeGpzL09ic2VydmFibGVcIjtcbi8vIGltcG9ydCB7TWFwU2lnbmF0dXJlfSBmcm9tIFwicnhqcy9vcGVyYXRvci9tYXBcIjtcbmltcG9ydCBcInJ4anMvYWRkL29wZXJhdG9yL21hcFwiO1xuXG4vKipcbiAqIEFuZ3VsYXIgMiBSZXN0Q2xpZW50IGNsYXNzLlxuICpcbiAqIEBjbGFzcyBSRVNUQ2xpZW50XG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZXhwb3J0IGNsYXNzIFJlc3RDbGllbnQge1xuXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggcHJvdGVjdGVkIGh0dHBDbGllbnQ6IEh0dHBDbGllbnQpIHtcbiAgfVxuXG4gIHByb3RlY3RlZCBnZXRTZXJ2aWNlSWQoKTogc3RyaW5ne1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcHJvdGVjdGVkIGdldEJhc2VVcmwoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICBwcm90ZWN0ZWQgZ2V0RGVmYXVsdEhlYWRlcnMoKTogT2JqZWN0IHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICAvKipcbiAgICogUmVxdWVzdCBJbnRlcmNlcHRvclxuICAgKlxuICAgKiBAbWV0aG9kIHJlcXVlc3RJbnRlcmNlcHRvclxuICAgKiBAcGFyYW0ge1JlcXVlc3R9IHJlcSAtIHJlcXVlc3Qgb2JqZWN0XG4gICAqL1xuICBwcm90ZWN0ZWQgcmVxdWVzdEludGVyY2VwdG9yKHJlcTogUmVxdWVzdCkge1xuICAgIC8vXG4gIH1cblxuICAvKipcbiAgICogUmVzcG9uc2UgSW50ZXJjZXB0b3JcbiAgICpcbiAgICogQG1ldGhvZCByZXNwb25zZUludGVyY2VwdG9yXG4gICAqIEBwYXJhbSB7UmVzcG9uc2V9IHJlcyAtIHJlc3BvbnNlIG9iamVjdFxuICAgKiBAcmV0dXJucyB7UmVzcG9uc2V9IHJlcyAtIHRyYW5zZm9ybWVkIHJlc3BvbnNlIG9iamVjdFxuICAgKi9cbiAgcHJvdGVjdGVkIHJlc3BvbnNlSW50ZXJjZXB0b3IocmVzOiBPYnNlcnZhYmxlPGFueT4pOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybiByZXM7XG4gIH1cblxufVxuXG4vKipcbiAqIENvbmZpZ3VyZSB0aGUgUkVTVCBDbGllbnRcbiAqIEBwYXJhbSB7U3RyaW5nfSB1cmwgLSBiYXNlIFVSTFxuICogQHBhcmFtIHtTdHJpbmd9IHNlcnZpY2VJZCAtIFNlcnZpY2UgSURcbiAqIEBwYXJhbSB7T2JqZWN0fSBoZWFkZXJzIC0gZGVhZnVsdCBoZWFkZXJzIGluIGEga2V5LXZhbHVlIHBhaXJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIENsaWVudChhcmdzOntzZXJ2aWNlSWQ/OiBzdHJpbmcsIGJhc2VVcmw/OiBzdHJpbmcsIGhlYWRlcnM/OiBhbnl9KSB7XG4gIHJldHVybiBmdW5jdGlvbiA8VEZ1bmN0aW9uIGV4dGVuZHMgRnVuY3Rpb24+KFRhcmdldDogVEZ1bmN0aW9uKTogVEZ1bmN0aW9uIHtcbiAgICBpZihhcmdzLnNlcnZpY2VJZCl7XG4gICAgICBUYXJnZXQucHJvdG90eXBlLmdldFNlcnZpY2VJZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gYXJncy5zZXJ2aWNlSWQ7XG4gICAgICB9O1xuICAgIH1cbiAgICBpZihhcmdzLmJhc2VVcmwpe1xuICAgICAgVGFyZ2V0LnByb3RvdHlwZS5nZXRCYXNlVXJsID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBhcmdzLmJhc2VVcmw7XG4gICAgICB9O1xuICAgIH1cbiAgICBpZihhcmdzLmhlYWRlcnMpe1xuICAgICAgVGFyZ2V0LnByb3RvdHlwZS5nZXREZWZhdWx0SGVhZGVycyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gYXJncy5oZWFkZXJzO1xuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIFRhcmdldDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gcGFyYW1CdWlsZGVyKHBhcmFtTmFtZTogc3RyaW5nKSB7XG4gIHJldHVybiBmdW5jdGlvbihrZXk6IHN0cmluZykge1xuICAgIHJldHVybiBmdW5jdGlvbih0YXJnZXQ6IFJlc3RDbGllbnQsIHByb3BlcnR5S2V5OiBzdHJpbmcgfCBzeW1ib2wsIHBhcmFtZXRlckluZGV4OiBudW1iZXIpIHtcbiAgICAgIHZhciBtZXRhZGF0YUtleSA9IGAke3Byb3BlcnR5S2V5fV8ke3BhcmFtTmFtZX1fcGFyYW1ldGVyc2A7XG4gICAgICB2YXIgcGFyYW1PYmo6IGFueSA9IHtcbiAgICAgICAga2V5OiBrZXksXG4gICAgICAgIHBhcmFtZXRlckluZGV4OiBwYXJhbWV0ZXJJbmRleFxuICAgICAgfTtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHRhcmdldFttZXRhZGF0YUtleV0pKSB7XG4gICAgICAgIHRhcmdldFttZXRhZGF0YUtleV0ucHVzaChwYXJhbU9iaik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0YXJnZXRbbWV0YWRhdGFLZXldID0gW3BhcmFtT2JqXTtcbiAgICAgIH1cbiAgICB9O1xuICB9O1xufVxuXG4vKipcbiAqIFBhdGggdmFyaWFibGUgb2YgYSBtZXRob2QncyB1cmwsIHR5cGU6IHN0cmluZ1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSAtIHBhdGgga2V5IHRvIGJpbmQgdmFsdWVcbiAqL1xuZXhwb3J0IHZhciBQYXRoID0gcGFyYW1CdWlsZGVyKFwiUGF0aFwiKTtcbi8qKlxuICogUXVlcnkgdmFsdWUgb2YgYSBtZXRob2QncyB1cmwsIHR5cGU6IHN0cmluZ1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSAtIHF1ZXJ5IGtleSB0byBiaW5kIHZhbHVlXG4gKi9cbmV4cG9ydCB2YXIgUXVlcnkgPSBwYXJhbUJ1aWxkZXIoXCJRdWVyeVwiKTtcbi8qKlxuICogQm9keSBvZiBhIFJFU1QgbWV0aG9kLCB0eXBlOiBrZXktdmFsdWUgcGFpciBvYmplY3RcbiAqIE9ubHkgb25lIGJvZHkgcGVyIG1ldGhvZCFcbiAqL1xuZXhwb3J0IHZhciBCb2R5ID0gcGFyYW1CdWlsZGVyKFwiQm9keVwiKShcIkJvZHlcIik7XG4vKipcbiAqIEN1c3RvbSBoZWFkZXIgb2YgYSBSRVNUIG1ldGhvZCwgdHlwZTogc3RyaW5nXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IC0gaGVhZGVyIGtleSB0byBiaW5kIHZhbHVlXG4gKi9cbmV4cG9ydCB2YXIgSGVhZGVyID0gcGFyYW1CdWlsZGVyKFwiSGVhZGVyXCIpO1xuXG5cbi8qKlxuICogU2V0IGN1c3RvbSBoZWFkZXJzIGZvciBhIFJFU1QgbWV0aG9kXG4gKiBAcGFyYW0ge09iamVjdH0gaGVhZGVyc0RlZiAtIGN1c3RvbSBoZWFkZXJzIGluIGEga2V5LXZhbHVlIHBhaXJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIEhlYWRlcnMoaGVhZGVyc0RlZjogYW55KSB7XG4gIHJldHVybiBmdW5jdGlvbih0YXJnZXQ6IFJlc3RDbGllbnQsIHByb3BlcnR5S2V5OiBzdHJpbmcsIGRlc2NyaXB0b3I6IGFueSkge1xuICAgIGRlc2NyaXB0b3IuaGVhZGVycyA9IGhlYWRlcnNEZWY7XG4gICAgcmV0dXJuIGRlc2NyaXB0b3I7XG4gIH07XG59XG5cbi8qKlxuICogRGVmaW5lcyBhIGN1c3RvbSBtYXBwZXIgZnVuY3Rpb25cbiAqIEBwYXJhbSBtYXBwZXIgZnVuY3Rpb24gdG8gbWFwXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBNYXAobWFwcGVyOihyZXNwIDogYW55KT0+YW55KXtcbiAgcmV0dXJuIGZ1bmN0aW9uKHRhcmdldDogUmVzdENsaWVudCwgcHJvcGVydHlLZXk6IHN0cmluZywgZGVzY3JpcHRvcjogYW55KSB7XG4gICAgaWYoIWRlc2NyaXB0b3IubWFwcGVycyl7XG4gICAgICBkZXNjcmlwdG9yLm1hcHBlcnMgPSBbXTtcbiAgICB9XG4gICAgZGVzY3JpcHRvci5tYXBwZXJzLnB1c2gobWFwcGVyKTtcbiAgICByZXR1cm4gZGVzY3JpcHRvcjtcbiAgfVxufVxuXG4vKipcbiAqIENhbGxlZCBqdXN0IGJlZm9yZSBlbWl0dGluZyB0aGUgcmVxdWVzdCwgdXNlZCB0byBhZGQgZnVuY3Rpb25zIHRvIHRoZSBvYnNlcnZhYmxlXG4gKiBAcGFyYW0gZW1pdHRlciBmdW5jdGlvbiB0byBhZGQgZnVuY3Rpb25zIHRvIHRoZSBvYnNlcnZhYmxlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBPbkVtaXQoZW1pdHRlcjoocmVzcCA6IE9ic2VydmFibGU8YW55Pik9Pk9ic2VydmFibGU8YW55Pil7XG4gIHJldHVybiBmdW5jdGlvbih0YXJnZXQ6IFJlc3RDbGllbnQsIHByb3BlcnR5S2V5OiBzdHJpbmcsIGRlc2NyaXB0b3I6IGFueSkge1xuICAgIGlmKCFkZXNjcmlwdG9yLmVtaXR0ZXJzKXtcbiAgICAgIGRlc2NyaXB0b3IuZW1pdHRlcnMgPSBbXTtcbiAgICB9XG4gICAgZGVzY3JpcHRvci5lbWl0dGVycy5wdXNoKGVtaXR0ZXIpO1xuICAgIHJldHVybiBkZXNjcmlwdG9yO1xuICB9XG59XG5cbi8qKlxuICogRGVmaW5lcyB0aGUgbWVkaWEgdHlwZShzKSB0aGF0IHRoZSBtZXRob2RzIGNhbiBwcm9kdWNlXG4gKiBAcGFyYW0gTWVkaWFUeXBlIG1lZGlhIHR5cGUgb3IgY3VzdG9tIG1hcHBlciBmdW5jdGlvblxuICovXG5leHBvcnQgZnVuY3Rpb24gUHJvZHVjZXMobWltZTpNZWRpYVR5cGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHRhcmdldDogUmVzdENsaWVudCwgcHJvcGVydHlLZXk6IHN0cmluZywgZGVzY3JpcHRvcjogYW55KSB7XG4gICAgaWYobWltZSAhPSB1bmRlZmluZWQpIHtcbiAgICAgIGlmIChtaW1lID09PSBNZWRpYVR5cGUuSlNPTikge1xuICAgICAgICBkZXNjcmlwdG9yLm1pbWUgPSByZXMgPT4gcmVzLmpzb24oKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGRlc2NyaXB0b3I7XG4gIH07XG59XG5cblxuLyoqXG4gKiBTdXBwb3J0ZWQgQFByb2R1Y2VzIG1lZGlhIHR5cGVzXG4gKi9cbmV4cG9ydCBlbnVtIE1lZGlhVHlwZSB7XG4gIEpTT05cbn1cblxuXG5mdW5jdGlvbiBtZXRob2RCdWlsZGVyKG1ldGhvZDogbnVtYmVyKSB7XG4gIHJldHVybiBmdW5jdGlvbih1cmw6IHN0cmluZykge1xuICAgIHJldHVybiBmdW5jdGlvbih0YXJnZXQ6IFJlc3RDbGllbnQsIHByb3BlcnR5S2V5OiBzdHJpbmcsIGRlc2NyaXB0b3I6IGFueSkge1xuXG4gICAgICB2YXIgcFBhdGggPSB0YXJnZXRbYCR7cHJvcGVydHlLZXl9X1BhdGhfcGFyYW1ldGVyc2BdO1xuICAgICAgdmFyIHBRdWVyeSA9IHRhcmdldFtgJHtwcm9wZXJ0eUtleX1fUXVlcnlfcGFyYW1ldGVyc2BdO1xuICAgICAgdmFyIHBCb2R5ID0gdGFyZ2V0W2Ake3Byb3BlcnR5S2V5fV9Cb2R5X3BhcmFtZXRlcnNgXTtcbiAgICAgIHZhciBwSGVhZGVyID0gdGFyZ2V0W2Ake3Byb3BlcnR5S2V5fV9IZWFkZXJfcGFyYW1ldGVyc2BdO1xuXG4gICAgICBkZXNjcmlwdG9yLnZhbHVlID0gZnVuY3Rpb24oLi4uYXJnczogYW55W10pIHtcblxuICAgICAgICAvLyBCb2R5XG4gICAgICAgIHZhciBib2R5ID0gbnVsbDtcbiAgICAgICAgaWYgKHBCb2R5KSB7XG4gICAgICAgICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KGFyZ3NbcEJvZHlbMF0ucGFyYW1ldGVySW5kZXhdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFBhdGhcbiAgICAgICAgdmFyIHJlc1VybDogc3RyaW5nID0gdXJsO1xuICAgICAgICBpZiAocFBhdGgpIHtcbiAgICAgICAgICBmb3IgKHZhciBrIGluIHBQYXRoKSB7XG4gICAgICAgICAgICBpZiAocFBhdGguaGFzT3duUHJvcGVydHkoaykpIHtcbiAgICAgICAgICAgICAgcmVzVXJsID0gcmVzVXJsLnJlcGxhY2UoXCJ7XCIgKyBwUGF0aFtrXS5rZXkgKyBcIn1cIiwgYXJnc1twUGF0aFtrXS5wYXJhbWV0ZXJJbmRleF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZih0aGlzLmdldEJhc2VVcmwoKSAhPSBudWxsKXtcbiAgICAgICAgICB2YXIgYmFzZVVybCA9IHRoaXMuZ2V0QmFzZVVybCgpO1xuICAgICAgICAgIGlmKGJhc2VVcmwuaW5kZXhPZihcIi9cIikgPT0gYmFzZVVybC5sZW5ndGgtMSAmJiByZXNVcmwuaW5kZXhPZihcIi9cIikgPT0gMCl7XG4gICAgICAgICAgICBiYXNlVXJsID0gYmFzZVVybC5zdWJzdHJpbmcoMCwgMSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc1VybCA9IGJhc2VVcmwgKyByZXNVcmw7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBRdWVyeVxuICAgICAgICB2YXIgc2VhcmNoID0gbmV3IFVSTFNlYXJjaFBhcmFtcygpO1xuICAgICAgICBpZiAocFF1ZXJ5KSB7XG4gICAgICAgICAgcFF1ZXJ5XG4gICAgICAgICAgICAuZmlsdGVyKHAgPT4gYXJnc1twLnBhcmFtZXRlckluZGV4XSkgLy8gZmlsdGVyIG91dCBvcHRpb25hbCBwYXJhbWV0ZXJzXG4gICAgICAgICAgICAuZm9yRWFjaChwID0+IHtcbiAgICAgICAgICAgICAgdmFyIGtleSA9IHAua2V5O1xuICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBhcmdzW3AucGFyYW1ldGVySW5kZXhdO1xuICAgICAgICAgICAgICAvLyBpZiB0aGUgdmFsdWUgaXMgYSBpbnN0YW5jZSBvZiBPYmplY3QsIHdlIHN0cmluZ2lmeSBpdFxuICAgICAgICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBPYmplY3QpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBzZWFyY2guc2V0KGVuY29kZVVSSUNvbXBvbmVudChrZXkpLCBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSGVhZGVyc1xuICAgICAgICAvLyBzZXQgY2xhc3MgZGVmYXVsdCBoZWFkZXJzXG4gICAgICAgIHZhciBoZWFkZXJzID0gbmV3IEFuZ3VsYXJIZWFkZXJzKHRoaXMuZ2V0RGVmYXVsdEhlYWRlcnMoKSk7XG4gICAgICAgIC8vIHNldCBtZXRob2Qgc3BlY2lmaWMgaGVhZGVyc1xuICAgICAgICBmb3IgKHZhciBrIGluIGRlc2NyaXB0b3IuaGVhZGVycykge1xuICAgICAgICAgIGlmIChkZXNjcmlwdG9yLmhlYWRlcnMuaGFzT3duUHJvcGVydHkoaykpIHtcbiAgICAgICAgICAgIGhlYWRlcnMuYXBwZW5kKGssIGRlc2NyaXB0b3IuaGVhZGVyc1trXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIHNldCBwYXJhbWV0ZXIgc3BlY2lmaWMgaGVhZGVyc1xuICAgICAgICBpZiAocEhlYWRlcikge1xuICAgICAgICAgIGZvciAodmFyIGsgaW4gcEhlYWRlcikge1xuICAgICAgICAgICAgaWYgKHBIZWFkZXIuaGFzT3duUHJvcGVydHkoaykpIHtcbiAgICAgICAgICAgICAgaGVhZGVycy5hcHBlbmQocEhlYWRlcltrXS5rZXksIGFyZ3NbcEhlYWRlcltrXS5wYXJhbWV0ZXJJbmRleF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJlcXVlc3Qgb3B0aW9uc1xuICAgICAgICB2YXIgb3B0aW9ucyA9IG5ldyBSZXF1ZXN0T3B0aW9ucyh7XG4gICAgICAgICAgbWV0aG9kLFxuICAgICAgICAgIHVybDogcmVzVXJsLFxuICAgICAgICAgIGhlYWRlcnMsXG4gICAgICAgICAgYm9keSxcbiAgICAgICAgICBzZWFyY2hcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdmFyIHJlcSA9IG5ldyBSZXF1ZXN0KG9wdGlvbnMpO1xuXG4gICAgICAgIC8vIGludGVyY2VwdCB0aGUgcmVxdWVzdFxuICAgICAgICB0aGlzLnJlcXVlc3RJbnRlcmNlcHRvcihyZXEpO1xuICAgICAgICAvLyBtYWtlIHRoZSByZXF1ZXN0IGFuZCBzdG9yZSB0aGUgb2JzZXJ2YWJsZSBmb3IgbGF0ZXIgdHJhbnNmb3JtYXRpb25cbiAgICAgICAgdmFyIG9ic2VydmFibGU6IE9ic2VydmFibGU8UmVzcG9uc2U+ID0gdGhpcy5odHRwQ2xpZW50LnJlcXVlc3QocmVxKTtcblxuICAgICAgICAvLyB0cmFuc2Zvcm0gdGhlIG9ic2VydmFibGUgaW4gYWNjb3JkYW5jZSB0byB0aGUgQFByb2R1Y2VzIGRlY29yYXRvclxuICAgICAgICBpZiAoZGVzY3JpcHRvci5taW1lKSB7XG4gICAgICAgICAgb2JzZXJ2YWJsZSA9IG9ic2VydmFibGUubWFwKGRlc2NyaXB0b3IubWltZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYoZGVzY3JpcHRvci5tYXBwZXJzKXtcbiAgICAgICAgICBkZXNjcmlwdG9yLm1hcHBlcnMuZm9yRWFjaChtYXBwZXIgPT4ge1xuICAgICAgICAgICAgb2JzZXJ2YWJsZSA9IG9ic2VydmFibGUubWFwKG1hcHBlcik7XG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICBpZihkZXNjcmlwdG9yLmVtaXR0ZXJzKXtcbiAgICAgICAgICBkZXNjcmlwdG9yLmVtaXR0ZXJzLmZvckVhY2goaGFuZGxlciA9PiB7XG4gICAgICAgICAgICBvYnNlcnZhYmxlID0gaGFuZGxlcihvYnNlcnZhYmxlKTtcbiAgICAgICAgICB9KVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gaW50ZXJjZXB0IHRoZSByZXNwb25zZVxuICAgICAgICBvYnNlcnZhYmxlID0gdGhpcy5yZXNwb25zZUludGVyY2VwdG9yKG9ic2VydmFibGUpO1xuXG4gICAgICAgIHJldHVybiBvYnNlcnZhYmxlO1xuICAgICAgfTtcblxuICAgICAgcmV0dXJuIGRlc2NyaXB0b3I7XG4gICAgfTtcbiAgfTtcbn1cblxuLyoqXG4gKiBHZXQgbWV0aG9kXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIC0gcmVzb3VyY2UgdXJsIG9mIHRoZSBtZXRob2RcbiAqL1xuZXhwb3J0IHZhciBHZXQgPSBtZXRob2RCdWlsZGVyKFJlcXVlc3RNZXRob2RzLkdldCk7XG4vKipcbiAqIFBvc3QgbWV0aG9kXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIC0gcmVzb3VyY2UgdXJsIG9mIHRoZSBtZXRob2RcbiAqL1xuZXhwb3J0IHZhciBQb3N0ID0gbWV0aG9kQnVpbGRlcihSZXF1ZXN0TWV0aG9kcy5Qb3N0KTtcbi8qKlxuICogUHV0IG1ldGhvZFxuICogQHBhcmFtIHtzdHJpbmd9IHVybCAtIHJlc291cmNlIHVybCBvZiB0aGUgbWV0aG9kXG4gKi9cbmV4cG9ydCB2YXIgUHV0ID0gbWV0aG9kQnVpbGRlcihSZXF1ZXN0TWV0aG9kcy5QdXQpO1xuXG4vKipcbiAqIFBhdGNoIG1ldGhvZFxuICogQHBhcmFtIHtzdHJpbmd9IHVybCAtIHJlc291cmNlIHVybCBvZiB0aGUgbWV0aG9kXG4gKi9cbmV4cG9ydCB2YXIgUGF0Y2ggPSBtZXRob2RCdWlsZGVyKFJlcXVlc3RNZXRob2RzLlBhdGNoKTtcbi8qKlxuICogRGVsZXRlIG1ldGhvZFxuICogQHBhcmFtIHtzdHJpbmd9IHVybCAtIHJlc291cmNlIHVybCBvZiB0aGUgbWV0aG9kXG4gKi9cbmV4cG9ydCB2YXIgRGVsZXRlID0gbWV0aG9kQnVpbGRlcihSZXF1ZXN0TWV0aG9kcy5EZWxldGUpO1xuLyoqXG4gKiBIZWFkIG1ldGhvZFxuICogQHBhcmFtIHtzdHJpbmd9IHVybCAtIHJlc291cmNlIHVybCBvZiB0aGUgbWV0aG9kXG4gKi9cbmV4cG9ydCB2YXIgSGVhZCA9IG1ldGhvZEJ1aWxkZXIoUmVxdWVzdE1ldGhvZHMuSGVhZCk7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSHR0cENsaWVudHtcblxuICByZXF1ZXN0KHVybDogc3RyaW5nIHwgUmVxdWVzdCwgb3B0aW9ucz86IFJlcXVlc3RPcHRpb25zQXJncyk6IE9ic2VydmFibGU8UmVzcG9uc2U+O1xuXG59XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
