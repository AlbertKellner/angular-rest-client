"use strict";function Client(e){return function(t){return e.serviceId&&(t.prototype.getServiceId=function(){return e.serviceId}),e.baseUrl&&(t.prototype.getBaseUrl=function(){return e.baseUrl}),e.headers&&(t.prototype.getDefaultHeaders=function(){return e.headers}),t}}function paramBuilder(e){return function(t){return function(r,n,o){var a=n+"_"+e+"_parameters",u={key:t,parameterIndex:o};Array.isArray(r[a])?r[a].push(u):r[a]=[u]}}}function Headers(e){return function(t,r,n){return n.headers=e,n}}function Map(e){return function(t,r,n){return n.mapper=e,n}}function Produces(e){return function(t,r,n){return void 0!=e&&e===MediaType.JSON&&(n.mime=function(e){return e.json()}),n}}function methodBuilder(e){return function(t){return function(r,n,o){var a=r[n+"_Path_parameters"],u=r[n+"_Query_parameters"],p=r[n+"_Body_parameters"],s=r[n+"_Header_parameters"];return o.value=function(){for(var r=[],n=0;n<arguments.length;n++)r[n-0]=arguments[n];var i=null;p&&(i=JSON.stringify(r[p[0].parameterIndex]));var d=t;if(a)for(var h in a)a.hasOwnProperty(h)&&(d=d.replace("{"+a[h].key+"}",r[a[h].parameterIndex]));if(null!=this.getBaseUrl()){var c=this.getBaseUrl();c.indexOf("/")==c.length-1&&0==d.indexOf("/")&&(c=c.substring(0,1)),d=c+d}var l=new http_1.URLSearchParams;u&&u.filter(function(e){return r[e.parameterIndex]}).forEach(function(e){var t=e.key,n=r[e.parameterIndex];n instanceof Object&&(n=JSON.stringify(n)),l.set(encodeURIComponent(t),encodeURIComponent(n))});var f=new http_1.Headers(this.getDefaultHeaders());for(var h in o.headers)o.headers.hasOwnProperty(h)&&f.append(h,o.headers[h]);if(s)for(var h in s)s.hasOwnProperty(h)&&f.append(s[h].key,r[s[h].parameterIndex]);var m=new http_1.RequestOptions({method:e,url:d,headers:f,body:i,search:l}),y=new http_1.Request(m);this.requestInterceptor(y);var x=this.httpClient.request(y);return void 0!=o.mapper?x=x.map(o.mapper):void 0!=o.mime&&(x=x.map(o.mime)),x=this.responseInterceptor(x)},o}}}var http_1=require("@angular/http"),RestClient=function(){function e(e){this.httpClient=e}return e.prototype.getServiceId=function(){return null},e.prototype.getBaseUrl=function(){return null},e.prototype.getDefaultHeaders=function(){return null},e.prototype.requestInterceptor=function(e){},e.prototype.responseInterceptor=function(e){return e},e}();exports.RestClient=RestClient,exports.Client=Client,exports.Path=paramBuilder("Path"),exports.Query=paramBuilder("Query"),exports.Body=paramBuilder("Body")("Body"),exports.Header=paramBuilder("Header"),exports.Headers=Headers,exports.Map=Map,exports.Produces=Produces,function(e){e[e.JSON=0]="JSON"}(exports.MediaType||(exports.MediaType={}));var MediaType=exports.MediaType;exports.Get=methodBuilder(http_1.RequestMethod.Get),exports.Post=methodBuilder(http_1.RequestMethod.Post),exports.Put=methodBuilder(http_1.RequestMethod.Put),exports.Delete=methodBuilder(http_1.RequestMethod.Delete),exports.Head=methodBuilder(http_1.RequestMethod.Head);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFuZ3VsYXIyLXJlc3QuanMiLCJhbmd1bGFyMi1yZXN0LnRzIl0sIm5hbWVzIjpbIkNsaWVudCIsImFyZ3MiLCJUYXJnZXQiLCJzZXJ2aWNlSWQiLCJwcm90b3R5cGUiLCJnZXRTZXJ2aWNlSWQiLCJiYXNlVXJsIiwiZ2V0QmFzZVVybCIsImhlYWRlcnMiLCJnZXREZWZhdWx0SGVhZGVycyIsInBhcmFtQnVpbGRlciIsInBhcmFtTmFtZSIsImtleSIsInRhcmdldCIsInByb3BlcnR5S2V5IiwicGFyYW1ldGVySW5kZXgiLCJtZXRhZGF0YUtleSIsInBhcmFtT2JqIiwiQXJyYXkiLCJpc0FycmF5IiwicHVzaCIsIkhlYWRlcnMiLCJoZWFkZXJzRGVmIiwiZGVzY3JpcHRvciIsIk1hcCIsIm1hcHBlciIsIlByb2R1Y2VzIiwibWltZSIsInVuZGVmaW5lZCIsIk1lZGlhVHlwZSIsIkpTT04iLCJyZXMiLCJqc29uIiwibWV0aG9kQnVpbGRlciIsIm1ldGhvZCIsInVybCIsInBQYXRoIiwicFF1ZXJ5IiwicEJvZHkiLCJwSGVhZGVyIiwidmFsdWUiLCJfaSIsImFyZ3VtZW50cyIsImxlbmd0aCIsImJvZHkiLCJzdHJpbmdpZnkiLCJyZXNVcmwiLCJrIiwiaGFzT3duUHJvcGVydHkiLCJyZXBsYWNlIiwidGhpcyIsImluZGV4T2YiLCJzdWJzdHJpbmciLCJzZWFyY2giLCJodHRwXzEiLCJVUkxTZWFyY2hQYXJhbXMiLCJmaWx0ZXIiLCJwIiwiZm9yRWFjaCIsIk9iamVjdCIsInNldCIsImVuY29kZVVSSUNvbXBvbmVudCIsImFwcGVuZCIsIm9wdGlvbnMiLCJSZXF1ZXN0T3B0aW9ucyIsInJlcSIsIlJlcXVlc3QiLCJyZXF1ZXN0SW50ZXJjZXB0b3IiLCJvYnNlcnZhYmxlIiwiaHR0cENsaWVudCIsInJlcXVlc3QiLCJtYXAiLCJyZXNwb25zZUludGVyY2VwdG9yIiwicmVxdWlyZSIsIlJlc3RDbGllbnQiLCJleHBvcnRzIiwiUGF0aCIsIlF1ZXJ5IiwiQm9keSIs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SzVCaUUsUUFBQUksT0FBU3JFLGFBQWEsVUFPakJpRSxRQUFBdEQsUUFBT0EsUUFZUHNELFFBQUFuRCxJQUFHQSxJQVdIbUQsUUFBQWpELFNBQVFBLFNBZXhCLFNBQVlHLEdBQ1ZBLEVBQUFBLEVBQUEsS0FBQSxHQUFBLFFBRFU4QyxRQUFBOUMsWUFBQThDLFFBQUE5QyxjQUFaLElBQVlBLFdBQUE4QyxRQUFBOUMsU0ErR0Q4QyxTQUFBSyxJQUFNL0MsY0FBY3FCLE9BQUEyQixjQUFlRCxLQUtuQ0wsUUFBQU8sS0FBT2pELGNBQWNxQixPQUFBMkIsY0FBZUMsTUFLcENQLFFBQUFRLElBQU1sRCxjQUFjcUIsT0FBQTJCLGNBQWVFLEtBS25DUixRQUFBUyxPQUFTbkQsY0FBY3FCLE9BQUEyQixjQUFlRyxRQUt0Q1QsUUFBQVUsS0FBT3BELGNBQWNxQixPQUFBMkIsY0FBZUkiLCJmaWxlIjoiYW5ndWxhcjItcmVzdC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBodHRwXzEgPSByZXF1aXJlKFwiQGFuZ3VsYXIvaHR0cFwiKTtcbnZhciBSZXN0Q2xpZW50ID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBSZXN0Q2xpZW50KGh0dHBDbGllbnQpIHtcbiAgICAgICAgdGhpcy5odHRwQ2xpZW50ID0gaHR0cENsaWVudDtcbiAgICB9XG4gICAgUmVzdENsaWVudC5wcm90b3R5cGUuZ2V0U2VydmljZUlkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuICAgIFJlc3RDbGllbnQucHJvdG90eXBlLmdldEJhc2VVcmwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH07XG4gICAgO1xuICAgIFJlc3RDbGllbnQucHJvdG90eXBlLmdldERlZmF1bHRIZWFkZXJzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuICAgIDtcbiAgICBSZXN0Q2xpZW50LnByb3RvdHlwZS5yZXF1ZXN0SW50ZXJjZXB0b3IgPSBmdW5jdGlvbiAocmVxKSB7XG4gICAgfTtcbiAgICBSZXN0Q2xpZW50LnByb3RvdHlwZS5yZXNwb25zZUludGVyY2VwdG9yID0gZnVuY3Rpb24gKHJlcykge1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH07XG4gICAgcmV0dXJuIFJlc3RDbGllbnQ7XG59KCkpO1xuZXhwb3J0cy5SZXN0Q2xpZW50ID0gUmVzdENsaWVudDtcbmZ1bmN0aW9uIENsaWVudChhcmdzKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChUYXJnZXQpIHtcbiAgICAgICAgaWYgKGFyZ3Muc2VydmljZUlkKSB7XG4gICAgICAgICAgICBUYXJnZXQucHJvdG90eXBlLmdldFNlcnZpY2VJZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXJncy5zZXJ2aWNlSWQ7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChhcmdzLmJhc2VVcmwpIHtcbiAgICAgICAgICAgIFRhcmdldC5wcm90b3R5cGUuZ2V0QmFzZVVybCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXJncy5iYXNlVXJsO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYXJncy5oZWFkZXJzKSB7XG4gICAgICAgICAgICBUYXJnZXQucHJvdG90eXBlLmdldERlZmF1bHRIZWFkZXJzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhcmdzLmhlYWRlcnM7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBUYXJnZXQ7XG4gICAgfTtcbn1cbmV4cG9ydHMuQ2xpZW50ID0gQ2xpZW50O1xuZnVuY3Rpb24gcGFyYW1CdWlsZGVyKHBhcmFtTmFtZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBwcm9wZXJ0eUtleSwgcGFyYW1ldGVySW5kZXgpIHtcbiAgICAgICAgICAgIHZhciBtZXRhZGF0YUtleSA9IHByb3BlcnR5S2V5ICsgXCJfXCIgKyBwYXJhbU5hbWUgKyBcIl9wYXJhbWV0ZXJzXCI7XG4gICAgICAgICAgICB2YXIgcGFyYW1PYmogPSB7XG4gICAgICAgICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgICAgICAgcGFyYW1ldGVySW5kZXg6IHBhcmFtZXRlckluZGV4XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGFyZ2V0W21ldGFkYXRhS2V5XSkpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRbbWV0YWRhdGFLZXldLnB1c2gocGFyYW1PYmopO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0W21ldGFkYXRhS2V5XSA9IFtwYXJhbU9ial07XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfTtcbn1cbmV4cG9ydHMuUGF0aCA9IHBhcmFtQnVpbGRlcihcIlBhdGhcIik7XG5leHBvcnRzLlF1ZXJ5ID0gcGFyYW1CdWlsZGVyKFwiUXVlcnlcIik7XG5leHBvcnRzLkJvZHkgPSBwYXJhbUJ1aWxkZXIoXCJCb2R5XCIpKFwiQm9keVwiKTtcbmV4cG9ydHMuSGVhZGVyID0gcGFyYW1CdWlsZGVyKFwiSGVhZGVyXCIpO1xuZnVuY3Rpb24gSGVhZGVycyhoZWFkZXJzRGVmKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIHByb3BlcnR5S2V5LCBkZXNjcmlwdG9yKSB7XG4gICAgICAgIGRlc2NyaXB0b3IuaGVhZGVycyA9IGhlYWRlcnNEZWY7XG4gICAgICAgIHJldHVybiBkZXNjcmlwdG9yO1xuICAgIH07XG59XG5leHBvcnRzLkhlYWRlcnMgPSBIZWFkZXJzO1xuZnVuY3Rpb24gTWFwKG1hcHBlcikge1xuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBwcm9wZXJ0eUtleSwgZGVzY3JpcHRvcikge1xuICAgICAgICBkZXNjcmlwdG9yLm1hcHBlciA9IG1hcHBlcjtcbiAgICAgICAgcmV0dXJuIGRlc2NyaXB0b3I7XG4gICAgfTtcbn1cbmV4cG9ydHMuTWFwID0gTWFwO1xuZnVuY3Rpb24gUHJvZHVjZXMobWltZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBwcm9wZXJ0eUtleSwgZGVzY3JpcHRvcikge1xuICAgICAgICBpZiAobWltZSAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmIChtaW1lID09PSBNZWRpYVR5cGUuSlNPTikge1xuICAgICAgICAgICAgICAgIGRlc2NyaXB0b3IubWltZSA9IGZ1bmN0aW9uIChyZXMpIHsgcmV0dXJuIHJlcy5qc29uKCk7IH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRlc2NyaXB0b3I7XG4gICAgfTtcbn1cbmV4cG9ydHMuUHJvZHVjZXMgPSBQcm9kdWNlcztcbihmdW5jdGlvbiAoTWVkaWFUeXBlKSB7XG4gICAgTWVkaWFUeXBlW01lZGlhVHlwZVtcIkpTT05cIl0gPSAwXSA9IFwiSlNPTlwiO1xufSkoZXhwb3J0cy5NZWRpYVR5cGUgfHwgKGV4cG9ydHMuTWVkaWFUeXBlID0ge30pKTtcbnZhciBNZWRpYVR5cGUgPSBleHBvcnRzLk1lZGlhVHlwZTtcbmZ1bmN0aW9uIG1ldGhvZEJ1aWxkZXIobWV0aG9kKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh1cmwpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIHByb3BlcnR5S2V5LCBkZXNjcmlwdG9yKSB7XG4gICAgICAgICAgICB2YXIgcFBhdGggPSB0YXJnZXRbKHByb3BlcnR5S2V5ICsgXCJfUGF0aF9wYXJhbWV0ZXJzXCIpXTtcbiAgICAgICAgICAgIHZhciBwUXVlcnkgPSB0YXJnZXRbKHByb3BlcnR5S2V5ICsgXCJfUXVlcnlfcGFyYW1ldGVyc1wiKV07XG4gICAgICAgICAgICB2YXIgcEJvZHkgPSB0YXJnZXRbKHByb3BlcnR5S2V5ICsgXCJfQm9keV9wYXJhbWV0ZXJzXCIpXTtcbiAgICAgICAgICAgIHZhciBwSGVhZGVyID0gdGFyZ2V0Wyhwcm9wZXJ0eUtleSArIFwiX0hlYWRlcl9wYXJhbWV0ZXJzXCIpXTtcbiAgICAgICAgICAgIGRlc2NyaXB0b3IudmFsdWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgICAgICBhcmdzW19pIC0gMF0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgYm9keSA9IG51bGw7XG4gICAgICAgICAgICAgICAgaWYgKHBCb2R5KSB7XG4gICAgICAgICAgICAgICAgICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeShhcmdzW3BCb2R5WzBdLnBhcmFtZXRlckluZGV4XSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciByZXNVcmwgPSB1cmw7XG4gICAgICAgICAgICAgICAgaWYgKHBQYXRoKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGsgaW4gcFBhdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwUGF0aC5oYXNPd25Qcm9wZXJ0eShrKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc1VybCA9IHJlc1VybC5yZXBsYWNlKFwie1wiICsgcFBhdGhba10ua2V5ICsgXCJ9XCIsIGFyZ3NbcFBhdGhba10ucGFyYW1ldGVySW5kZXhdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5nZXRCYXNlVXJsKCkgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYmFzZVVybCA9IHRoaXMuZ2V0QmFzZVVybCgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYmFzZVVybC5pbmRleE9mKFwiL1wiKSA9PSBiYXNlVXJsLmxlbmd0aCAtIDEgJiYgcmVzVXJsLmluZGV4T2YoXCIvXCIpID09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhc2VVcmwgPSBiYXNlVXJsLnN1YnN0cmluZygwLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXNVcmwgPSBiYXNlVXJsICsgcmVzVXJsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgc2VhcmNoID0gbmV3IGh0dHBfMS5VUkxTZWFyY2hQYXJhbXMoKTtcbiAgICAgICAgICAgICAgICBpZiAocFF1ZXJ5KSB7XG4gICAgICAgICAgICAgICAgICAgIHBRdWVyeVxuICAgICAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAocCkgeyByZXR1cm4gYXJnc1twLnBhcmFtZXRlckluZGV4XTsgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5mb3JFYWNoKGZ1bmN0aW9uIChwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIga2V5ID0gcC5rZXk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBhcmdzW3AucGFyYW1ldGVySW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgT2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWFyY2guc2V0KGVuY29kZVVSSUNvbXBvbmVudChrZXkpLCBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBoZWFkZXJzID0gbmV3IGh0dHBfMS5IZWFkZXJzKHRoaXMuZ2V0RGVmYXVsdEhlYWRlcnMoKSk7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgayBpbiBkZXNjcmlwdG9yLmhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRlc2NyaXB0b3IuaGVhZGVycy5oYXNPd25Qcm9wZXJ0eShrKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVycy5hcHBlbmQoaywgZGVzY3JpcHRvci5oZWFkZXJzW2tdKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocEhlYWRlcikge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBrIGluIHBIZWFkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwSGVhZGVyLmhhc093blByb3BlcnR5KGspKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVycy5hcHBlbmQocEhlYWRlcltrXS5rZXksIGFyZ3NbcEhlYWRlcltrXS5wYXJhbWV0ZXJJbmRleF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBvcHRpb25zID0gbmV3IGh0dHBfMS5SZXF1ZXN0T3B0aW9ucyh7XG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgICAgICAgICAgICAgICB1cmw6IHJlc1VybCxcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyxcbiAgICAgICAgICAgICAgICAgICAgYm9keTogYm9keSxcbiAgICAgICAgICAgICAgICAgICAgc2VhcmNoOiBzZWFyY2hcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB2YXIgcmVxID0gbmV3IGh0dHBfMS5SZXF1ZXN0KG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIHRoaXMucmVxdWVzdEludGVyY2VwdG9yKHJlcSk7XG4gICAgICAgICAgICAgICAgdmFyIG9ic2VydmFibGUgPSB0aGlzLmh0dHBDbGllbnQucmVxdWVzdChyZXEpO1xuICAgICAgICAgICAgICAgIGlmIChkZXNjcmlwdG9yLm1hcHBlciAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2YWJsZSA9IG9ic2VydmFibGUubWFwKGRlc2NyaXB0b3IubWFwcGVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoZGVzY3JpcHRvci5taW1lICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBvYnNlcnZhYmxlID0gb2JzZXJ2YWJsZS5tYXAoZGVzY3JpcHRvci5taW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgb2JzZXJ2YWJsZSA9IHRoaXMucmVzcG9uc2VJbnRlcmNlcHRvcihvYnNlcnZhYmxlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gZGVzY3JpcHRvcjtcbiAgICAgICAgfTtcbiAgICB9O1xufVxuZXhwb3J0cy5HZXQgPSBtZXRob2RCdWlsZGVyKGh0dHBfMS5SZXF1ZXN0TWV0aG9kLkdldCk7XG5leHBvcnRzLlBvc3QgPSBtZXRob2RCdWlsZGVyKGh0dHBfMS5SZXF1ZXN0TWV0aG9kLlBvc3QpO1xuZXhwb3J0cy5QdXQgPSBtZXRob2RCdWlsZGVyKGh0dHBfMS5SZXF1ZXN0TWV0aG9kLlB1dCk7XG5leHBvcnRzLkRlbGV0ZSA9IG1ldGhvZEJ1aWxkZXIoaHR0cF8xLlJlcXVlc3RNZXRob2QuRGVsZXRlKTtcbmV4cG9ydHMuSGVhZCA9IG1ldGhvZEJ1aWxkZXIoaHR0cF8xLlJlcXVlc3RNZXRob2QuSGVhZCk7XG4iLCIvKlxuXG4gYW5ndWxhcjItcmVzdFxuIChjKSBEb21vbmtvcyBQYWxcbiBMaWNlbnNlOiBNSVRcblxuIFRhYmxlIG9mIENvbnRlbnRzOlxuXG4gLSBjbGFzcyBSRVNUQ2xpZW50XG5cbiAtIENsYXNzIERlY29yYXRvcnM6XG4gQEJhc2VVcmwoU3RyaW5nKVxuIEBEZWZhdWx0SGVhZGVycyhPYmplY3QpXG5cbiAtIE1ldGhvZCBEZWNvcmF0b3JzOlxuIEBHRVQodXJsOiBTdHJpbmcpXG4gQFBPU1QodXJsOiBTdHJpbmcpXG4gQFBVVCh1cmw6IFN0cmluZylcbiBAREVMRVRFKHVybDogU3RyaW5nKVxuIEBIZWFkZXJzKG9iamVjdClcbiBAUHJvZHVjZXMoTWVkaWFUeXBlKVxuXG4gLSBQYXJhbWV0ZXIgRGVjb3JhdG9yczpcbiBAUGF0aChzdHJpbmcpXG4gQFF1ZXJ5KHN0cmluZylcbiBASGVhZGVyKHN0cmluZylcbiBAQm9keVxuICovXG5cbmltcG9ydCB7XG4gIEhlYWRlcnMgYXMgQW5ndWxhckhlYWRlcnMsXG4gIFJlcXVlc3QsXG4gIFJlcXVlc3RPcHRpb25zLFxuICBSZXF1ZXN0TWV0aG9kIGFzIFJlcXVlc3RNZXRob2RzLFxuICBSZXNwb25zZSxcbiAgVVJMU2VhcmNoUGFyYW1zLFxuICBSZXF1ZXN0T3B0aW9uc0FyZ3Ncbn0gZnJvbSBcIkBhbmd1bGFyL2h0dHBcIjtcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSBcInJ4anMvT2JzZXJ2YWJsZVwiO1xuaW1wb3J0IHtNYXBTaWduYXR1cmV9IGZyb20gXCJyeGpzL29wZXJhdG9yL21hcFwiO1xuXG4vKipcbiAqIEFuZ3VsYXIgMiBSZXN0Q2xpZW50IGNsYXNzLlxuICpcbiAqIEBjbGFzcyBSRVNUQ2xpZW50XG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZXhwb3J0IGNsYXNzIFJlc3RDbGllbnQge1xuXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggcHJvdGVjdGVkIGh0dHBDbGllbnQ6IEh0dHBDbGllbnQpIHtcbiAgfVxuXG4gIHByb3RlY3RlZCBnZXRTZXJ2aWNlSWQoKTogc3RyaW5ne1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcHJvdGVjdGVkIGdldEJhc2VVcmwoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICBwcm90ZWN0ZWQgZ2V0RGVmYXVsdEhlYWRlcnMoKTogT2JqZWN0IHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICAvKipcbiAgICogUmVxdWVzdCBJbnRlcmNlcHRvclxuICAgKlxuICAgKiBAbWV0aG9kIHJlcXVlc3RJbnRlcmNlcHRvclxuICAgKiBAcGFyYW0ge1JlcXVlc3R9IHJlcSAtIHJlcXVlc3Qgb2JqZWN0XG4gICAqL1xuICBwcm90ZWN0ZWQgcmVxdWVzdEludGVyY2VwdG9yKHJlcTogUmVxdWVzdCkge1xuICAgIC8vXG4gIH1cblxuICAvKipcbiAgICogUmVzcG9uc2UgSW50ZXJjZXB0b3JcbiAgICpcbiAgICogQG1ldGhvZCByZXNwb25zZUludGVyY2VwdG9yXG4gICAqIEBwYXJhbSB7UmVzcG9uc2V9IHJlcyAtIHJlc3BvbnNlIG9iamVjdFxuICAgKiBAcmV0dXJucyB7UmVzcG9uc2V9IHJlcyAtIHRyYW5zZm9ybWVkIHJlc3BvbnNlIG9iamVjdFxuICAgKi9cbiAgcHJvdGVjdGVkIHJlc3BvbnNlSW50ZXJjZXB0b3IocmVzOiBPYnNlcnZhYmxlPGFueT4pOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybiByZXM7XG4gIH1cblxufVxuXG4vKipcbiAqIENvbmZpZ3VyZSB0aGUgUkVTVCBDbGllbnRcbiAqIEBwYXJhbSB7U3RyaW5nfSB1cmwgLSBiYXNlIFVSTFxuICogQHBhcmFtIHtTdHJpbmd9IHNlcnZpY2VJZCAtIFNlcnZpY2UgSURcbiAqIEBwYXJhbSB7T2JqZWN0fSBoZWFkZXJzIC0gZGVhZnVsdCBoZWFkZXJzIGluIGEga2V5LXZhbHVlIHBhaXJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIENsaWVudChhcmdzOntzZXJ2aWNlSWQ/OiBzdHJpbmcsIGJhc2VVcmw/OiBzdHJpbmcsIGhlYWRlcnM/OiBhbnl9KSB7XG4gIHJldHVybiBmdW5jdGlvbiA8VEZ1bmN0aW9uIGV4dGVuZHMgRnVuY3Rpb24+KFRhcmdldDogVEZ1bmN0aW9uKTogVEZ1bmN0aW9uIHtcbiAgICBpZihhcmdzLnNlcnZpY2VJZCl7XG4gICAgICBUYXJnZXQucHJvdG90eXBlLmdldFNlcnZpY2VJZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gYXJncy5zZXJ2aWNlSWQ7XG4gICAgICB9O1xuICAgIH1cbiAgICBpZihhcmdzLmJhc2VVcmwpe1xuICAgICAgVGFyZ2V0LnByb3RvdHlwZS5nZXRCYXNlVXJsID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBhcmdzLmJhc2VVcmw7XG4gICAgICB9O1xuICAgIH1cbiAgICBpZihhcmdzLmhlYWRlcnMpe1xuICAgICAgVGFyZ2V0LnByb3RvdHlwZS5nZXREZWZhdWx0SGVhZGVycyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gYXJncy5oZWFkZXJzO1xuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIFRhcmdldDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gcGFyYW1CdWlsZGVyKHBhcmFtTmFtZTogc3RyaW5nKSB7XG4gIHJldHVybiBmdW5jdGlvbihrZXk6IHN0cmluZykge1xuICAgIHJldHVybiBmdW5jdGlvbih0YXJnZXQ6IFJlc3RDbGllbnQsIHByb3BlcnR5S2V5OiBzdHJpbmcgfCBzeW1ib2wsIHBhcmFtZXRlckluZGV4OiBudW1iZXIpIHtcbiAgICAgIHZhciBtZXRhZGF0YUtleSA9IGAke3Byb3BlcnR5S2V5fV8ke3BhcmFtTmFtZX1fcGFyYW1ldGVyc2A7XG4gICAgICB2YXIgcGFyYW1PYmo6IGFueSA9IHtcbiAgICAgICAga2V5OiBrZXksXG4gICAgICAgIHBhcmFtZXRlckluZGV4OiBwYXJhbWV0ZXJJbmRleFxuICAgICAgfTtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHRhcmdldFttZXRhZGF0YUtleV0pKSB7XG4gICAgICAgIHRhcmdldFttZXRhZGF0YUtleV0ucHVzaChwYXJhbU9iaik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0YXJnZXRbbWV0YWRhdGFLZXldID0gW3BhcmFtT2JqXTtcbiAgICAgIH1cbiAgICB9O1xuICB9O1xufVxuXG4vKipcbiAqIFBhdGggdmFyaWFibGUgb2YgYSBtZXRob2QncyB1cmwsIHR5cGU6IHN0cmluZ1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSAtIHBhdGgga2V5IHRvIGJpbmQgdmFsdWVcbiAqL1xuZXhwb3J0IHZhciBQYXRoID0gcGFyYW1CdWlsZGVyKFwiUGF0aFwiKTtcbi8qKlxuICogUXVlcnkgdmFsdWUgb2YgYSBtZXRob2QncyB1cmwsIHR5cGU6IHN0cmluZ1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSAtIHF1ZXJ5IGtleSB0byBiaW5kIHZhbHVlXG4gKi9cbmV4cG9ydCB2YXIgUXVlcnkgPSBwYXJhbUJ1aWxkZXIoXCJRdWVyeVwiKTtcbi8qKlxuICogQm9keSBvZiBhIFJFU1QgbWV0aG9kLCB0eXBlOiBrZXktdmFsdWUgcGFpciBvYmplY3RcbiAqIE9ubHkgb25lIGJvZHkgcGVyIG1ldGhvZCFcbiAqL1xuZXhwb3J0IHZhciBCb2R5ID0gcGFyYW1CdWlsZGVyKFwiQm9keVwiKShcIkJvZHlcIik7XG4vKipcbiAqIEN1c3RvbSBoZWFkZXIgb2YgYSBSRVNUIG1ldGhvZCwgdHlwZTogc3RyaW5nXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IC0gaGVhZGVyIGtleSB0byBiaW5kIHZhbHVlXG4gKi9cbmV4cG9ydCB2YXIgSGVhZGVyID0gcGFyYW1CdWlsZGVyKFwiSGVhZGVyXCIpO1xuXG5cbi8qKlxuICogU2V0IGN1c3RvbSBoZWFkZXJzIGZvciBhIFJFU1QgbWV0aG9kXG4gKiBAcGFyYW0ge09iamVjdH0gaGVhZGVyc0RlZiAtIGN1c3RvbSBoZWFkZXJzIGluIGEga2V5LXZhbHVlIHBhaXJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIEhlYWRlcnMoaGVhZGVyc0RlZjogYW55KSB7XG4gIHJldHVybiBmdW5jdGlvbih0YXJnZXQ6IFJlc3RDbGllbnQsIHByb3BlcnR5S2V5OiBzdHJpbmcsIGRlc2NyaXB0b3I6IGFueSkge1xuICAgIGRlc2NyaXB0b3IuaGVhZGVycyA9IGhlYWRlcnNEZWY7XG4gICAgcmV0dXJuIGRlc2NyaXB0b3I7XG4gIH07XG59XG5cbi8qKlxuICogRGVmaW5lcyBhIGN1c3RvbSBtYXBwZXIgZnVuY3Rpb25cbiAqIE92ZXJyaWRlcyBAUHJvZHVjZXNcbiAqIEBwYXJhbSBNZWRpYVR5cGUgbWVkaWEgdHlwZSBvciBjdXN0b20gbWFwcGVyIGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBNYXAobWFwcGVyOihyZXNwIDogYW55KT0+YW55KXtcbiAgcmV0dXJuIGZ1bmN0aW9uKHRhcmdldDogUmVzdENsaWVudCwgcHJvcGVydHlLZXk6IHN0cmluZywgZGVzY3JpcHRvcjogYW55KSB7XG4gICAgZGVzY3JpcHRvci5tYXBwZXIgPSBtYXBwZXI7XG4gICAgcmV0dXJuIGRlc2NyaXB0b3I7XG4gIH1cbn1cblxuLyoqXG4gKiBEZWZpbmVzIHRoZSBtZWRpYSB0eXBlKHMpIHRoYXQgdGhlIG1ldGhvZHMgY2FuIHByb2R1Y2VcbiAqIEBwYXJhbSBNZWRpYVR5cGUgbWVkaWEgdHlwZSBvciBjdXN0b20gbWFwcGVyIGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBQcm9kdWNlcyhtaW1lOk1lZGlhVHlwZSkge1xuICByZXR1cm4gZnVuY3Rpb24odGFyZ2V0OiBSZXN0Q2xpZW50LCBwcm9wZXJ0eUtleTogc3RyaW5nLCBkZXNjcmlwdG9yOiBhbnkpIHtcbiAgICBpZihtaW1lICE9IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKG1pbWUgPT09IE1lZGlhVHlwZS5KU09OKSB7XG4gICAgICAgIGRlc2NyaXB0b3IubWltZSA9IHJlcyA9PiByZXMuanNvbigpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZGVzY3JpcHRvcjtcbiAgfTtcbn1cblxuXG4vKipcbiAqIFN1cHBvcnRlZCBAUHJvZHVjZXMgbWVkaWEgdHlwZXNcbiAqL1xuZXhwb3J0IGVudW0gTWVkaWFUeXBlIHtcbiAgSlNPTlxufVxuXG5cbmZ1bmN0aW9uIG1ldGhvZEJ1aWxkZXIobWV0aG9kOiBudW1iZXIpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHVybDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHRhcmdldDogUmVzdENsaWVudCwgcHJvcGVydHlLZXk6IHN0cmluZywgZGVzY3JpcHRvcjogYW55KSB7XG5cbiAgICAgIHZhciBwUGF0aCA9IHRhcmdldFtgJHtwcm9wZXJ0eUtleX1fUGF0aF9wYXJhbWV0ZXJzYF07XG4gICAgICB2YXIgcFF1ZXJ5ID0gdGFyZ2V0W2Ake3Byb3BlcnR5S2V5fV9RdWVyeV9wYXJhbWV0ZXJzYF07XG4gICAgICB2YXIgcEJvZHkgPSB0YXJnZXRbYCR7cHJvcGVydHlLZXl9X0JvZHlfcGFyYW1ldGVyc2BdO1xuICAgICAgdmFyIHBIZWFkZXIgPSB0YXJnZXRbYCR7cHJvcGVydHlLZXl9X0hlYWRlcl9wYXJhbWV0ZXJzYF07XG5cbiAgICAgIGRlc2NyaXB0b3IudmFsdWUgPSBmdW5jdGlvbiguLi5hcmdzOiBhbnlbXSkge1xuXG4gICAgICAgIC8vIEJvZHlcbiAgICAgICAgdmFyIGJvZHkgPSBudWxsO1xuICAgICAgICBpZiAocEJvZHkpIHtcbiAgICAgICAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkoYXJnc1twQm9keVswXS5wYXJhbWV0ZXJJbmRleF0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUGF0aFxuICAgICAgICB2YXIgcmVzVXJsOiBzdHJpbmcgPSB1cmw7XG4gICAgICAgIGlmIChwUGF0aCkge1xuICAgICAgICAgIGZvciAodmFyIGsgaW4gcFBhdGgpIHtcbiAgICAgICAgICAgIGlmIChwUGF0aC5oYXNPd25Qcm9wZXJ0eShrKSkge1xuICAgICAgICAgICAgICByZXNVcmwgPSByZXNVcmwucmVwbGFjZShcIntcIiArIHBQYXRoW2tdLmtleSArIFwifVwiLCBhcmdzW3BQYXRoW2tdLnBhcmFtZXRlckluZGV4XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmKHRoaXMuZ2V0QmFzZVVybCgpICE9IG51bGwpe1xuICAgICAgICAgIHZhciBiYXNlVXJsID0gdGhpcy5nZXRCYXNlVXJsKCk7XG4gICAgICAgICAgaWYoYmFzZVVybC5pbmRleE9mKFwiL1wiKSA9PSBiYXNlVXJsLmxlbmd0aC0xICYmIHJlc1VybC5pbmRleE9mKFwiL1wiKSA9PSAwKXtcbiAgICAgICAgICAgIGJhc2VVcmwgPSBiYXNlVXJsLnN1YnN0cmluZygwLCAxKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzVXJsID0gYmFzZVVybCArIHJlc1VybDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFF1ZXJ5XG4gICAgICAgIHZhciBzZWFyY2ggPSBuZXcgVVJMU2VhcmNoUGFyYW1zKCk7XG4gICAgICAgIGlmIChwUXVlcnkpIHtcbiAgICAgICAgICBwUXVlcnlcbiAgICAgICAgICAgIC5maWx0ZXIocCA9PiBhcmdzW3AucGFyYW1ldGVySW5kZXhdKSAvLyBmaWx0ZXIgb3V0IG9wdGlvbmFsIHBhcmFtZXRlcnNcbiAgICAgICAgICAgIC5mb3JFYWNoKHAgPT4ge1xuICAgICAgICAgICAgICB2YXIga2V5ID0gcC5rZXk7XG4gICAgICAgICAgICAgIHZhciB2YWx1ZSA9IGFyZ3NbcC5wYXJhbWV0ZXJJbmRleF07XG4gICAgICAgICAgICAgIC8vIGlmIHRoZSB2YWx1ZSBpcyBhIGluc3RhbmNlIG9mIE9iamVjdCwgd2Ugc3RyaW5naWZ5IGl0XG4gICAgICAgICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIE9iamVjdCkge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHNlYXJjaC5zZXQoZW5jb2RlVVJJQ29tcG9uZW50KGtleSksIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBIZWFkZXJzXG4gICAgICAgIC8vIHNldCBjbGFzcyBkZWZhdWx0IGhlYWRlcnNcbiAgICAgICAgdmFyIGhlYWRlcnMgPSBuZXcgQW5ndWxhckhlYWRlcnModGhpcy5nZXREZWZhdWx0SGVhZGVycygpKTtcbiAgICAgICAgLy8gc2V0IG1ldGhvZCBzcGVjaWZpYyBoZWFkZXJzXG4gICAgICAgIGZvciAodmFyIGsgaW4gZGVzY3JpcHRvci5oZWFkZXJzKSB7XG4gICAgICAgICAgaWYgKGRlc2NyaXB0b3IuaGVhZGVycy5oYXNPd25Qcm9wZXJ0eShrKSkge1xuICAgICAgICAgICAgaGVhZGVycy5hcHBlbmQoaywgZGVzY3JpcHRvci5oZWFkZXJzW2tdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gc2V0IHBhcmFtZXRlciBzcGVjaWZpYyBoZWFkZXJzXG4gICAgICAgIGlmIChwSGVhZGVyKSB7XG4gICAgICAgICAgZm9yICh2YXIgayBpbiBwSGVhZGVyKSB7XG4gICAgICAgICAgICBpZiAocEhlYWRlci5oYXNPd25Qcm9wZXJ0eShrKSkge1xuICAgICAgICAgICAgICBoZWFkZXJzLmFwcGVuZChwSGVhZGVyW2tdLmtleSwgYXJnc1twSGVhZGVyW2tdLnBhcmFtZXRlckluZGV4XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gUmVxdWVzdCBvcHRpb25zXG4gICAgICAgIHZhciBvcHRpb25zID0gbmV3IFJlcXVlc3RPcHRpb25zKHtcbiAgICAgICAgICBtZXRob2QsXG4gICAgICAgICAgdXJsOiByZXNVcmwsXG4gICAgICAgICAgaGVhZGVycyxcbiAgICAgICAgICBib2R5LFxuICAgICAgICAgIHNlYXJjaFxuICAgICAgICB9KTtcblxuICAgICAgICB2YXIgcmVxID0gbmV3IFJlcXVlc3Qob3B0aW9ucyk7XG5cbiAgICAgICAgLy8gaW50ZXJjZXB0IHRoZSByZXF1ZXN0XG4gICAgICAgIHRoaXMucmVxdWVzdEludGVyY2VwdG9yKHJlcSk7XG4gICAgICAgIC8vIG1ha2UgdGhlIHJlcXVlc3QgYW5kIHN0b3JlIHRoZSBvYnNlcnZhYmxlIGZvciBsYXRlciB0cmFuc2Zvcm1hdGlvblxuICAgICAgICB2YXIgb2JzZXJ2YWJsZTogT2JzZXJ2YWJsZTxSZXNwb25zZT4gPSB0aGlzLmh0dHBDbGllbnQucmVxdWVzdChyZXEpO1xuXG4gICAgICAgIC8vIHRyYW5zZm9ybSB0aGUgb2JzZXJ2YWJsZSBpbiBhY2NvcmRhbmNlIHRvIHRoZSBAUHJvZHVjZXMgZGVjb3JhdG9yXG4gICAgICAgIGlmIChkZXNjcmlwdG9yLm1hcHBlciAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBvYnNlcnZhYmxlID0gb2JzZXJ2YWJsZS5tYXAoZGVzY3JpcHRvci5tYXBwZXIpO1xuICAgICAgICB9ZWxzZSBpZiAoZGVzY3JpcHRvci5taW1lICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgIG9ic2VydmFibGUgPSBvYnNlcnZhYmxlLm1hcChkZXNjcmlwdG9yLm1pbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gaW50ZXJjZXB0IHRoZSByZXNwb25zZVxuICAgICAgICBvYnNlcnZhYmxlID0gdGhpcy5yZXNwb25zZUludGVyY2VwdG9yKG9ic2VydmFibGUpO1xuXG4gICAgICAgIHJldHVybiBvYnNlcnZhYmxlO1xuICAgICAgfTtcblxuICAgICAgcmV0dXJuIGRlc2NyaXB0b3I7XG4gICAgfTtcbiAgfTtcbn1cblxuLyoqXG4gKiBHZXQgbWV0aG9kXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIC0gcmVzb3VyY2UgdXJsIG9mIHRoZSBtZXRob2RcbiAqL1xuZXhwb3J0IHZhciBHZXQgPSBtZXRob2RCdWlsZGVyKFJlcXVlc3RNZXRob2RzLkdldCk7XG4vKipcbiAqIFBvc3QgbWV0aG9kXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIC0gcmVzb3VyY2UgdXJsIG9mIHRoZSBtZXRob2RcbiAqL1xuZXhwb3J0IHZhciBQb3N0ID0gbWV0aG9kQnVpbGRlcihSZXF1ZXN0TWV0aG9kcy5Qb3N0KTtcbi8qKlxuICogUHV0IG1ldGhvZFxuICogQHBhcmFtIHtzdHJpbmd9IHVybCAtIHJlc291cmNlIHVybCBvZiB0aGUgbWV0aG9kXG4gKi9cbmV4cG9ydCB2YXIgUHV0ID0gbWV0aG9kQnVpbGRlcihSZXF1ZXN0TWV0aG9kcy5QdXQpO1xuLyoqXG4gKiBEZWxldGUgbWV0aG9kXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIC0gcmVzb3VyY2UgdXJsIG9mIHRoZSBtZXRob2RcbiAqL1xuZXhwb3J0IHZhciBEZWxldGUgPSBtZXRob2RCdWlsZGVyKFJlcXVlc3RNZXRob2RzLkRlbGV0ZSk7XG4vKipcbiAqIEhlYWQgbWV0aG9kXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIC0gcmVzb3VyY2UgdXJsIG9mIHRoZSBtZXRob2RcbiAqL1xuZXhwb3J0IHZhciBIZWFkID0gbWV0aG9kQnVpbGRlcihSZXF1ZXN0TWV0aG9kcy5IZWFkKTtcblxuZXhwb3J0IGludGVyZmFjZSBIdHRwQ2xpZW50e1xuXG4gIHJlcXVlc3QodXJsOiBzdHJpbmcgfCBSZXF1ZXN0LCBvcHRpb25zPzogUmVxdWVzdE9wdGlvbnNBcmdzKTogT2JzZXJ2YWJsZTxSZXNwb25zZT47XG5cbn1cbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
